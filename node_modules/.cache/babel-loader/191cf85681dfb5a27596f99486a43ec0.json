{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ddima\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\course\\\\beetroot-academy\\\\Loshkovetska\\\\cinema-park\\\\src\\\\components\\\\Comments\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport comments from \"../../mockData/comments\";\nimport \"./Comments.scss\";\nimport { users } from \"../../mockData/users\";\nimport { Heart } from \"../Svg/Svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments() {\n  _s();\n\n  if (localStorage.getItem(\"user\")) {\n    const [comment, setComment] = useState();\n    const [countComments, setCount] = useState(comments.length);\n    const [likes, setLikes] = useState(0);\n    const [{\n      name,\n      email\n    }] = users.filter(user => user.email.includes(localStorage.getItem(\"user\")));\n    const [user, setUser] = useState();\n  }\n\n  function onChangeHadler(e) {\n    setComment(e.target.value);\n  }\n\n  function addComment() {\n    comments.push({\n      author: name,\n      text: comment,\n      countLikes: 0,\n      date: new Date().toLocaleDateString('ru-RU')\n    });\n    setCount(comments.length);\n  }\n\n  function putLike(e) {\n    console.log(e);\n    let ind = +e.target.dataset.id;\n\n    if (user === email && +comments[ind].countLikes > 0) {\n      comments[ind].countLikes = +comments[ind].countLikes - 1;\n      setUser(\"\");\n    } else {\n      comments[ind].countLikes = +comments[ind].countLikes + 1;\n      setUser(email);\n    }\n\n    setLikes(comments[ind].countLikes);\n  }\n\n  function getComment(author, date, text, countLikes, index) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment__top\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment__author\",\n          children: author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment__date\",\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"comment__text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment__bottom\",\n        children: [/*#__PURE__*/_jsxDEV(Heart, {\n          className: \"heart-svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: putLike,\n          className: \"button button--like\",\n          \"data-id\": index,\n          children: countLikes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments__count\",\n        children: [\"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0456 (\", countComments, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments__input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          required: true,\n          className: \"input input--comment\",\n          onChange: onChangeHadler,\n          placeholder: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0456\\u0442\\u044C \\u0441\\u0432\\u043E\\u0457 \\u0432\\u0440\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0432\\u0456\\u0434  \\u043F\\u0435\\u0440\\u0435\\u0433\\u043B\\u044F\\u0434\\u0443 \\u0444\\u0456\\u043B\\u044C\\u043C\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button button--comment\",\n          onClick: addComment,\n          children: \"\\u0412\\u0456\\u0434\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments__output\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments__old\",\n          children: comments.map((comment, index) => getComment(comment.author, comment.date, comment.text, comment.countLikes, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Comments, \"hz1ze1TsADrhTso+kga7tDu70g0=\");\n\n_c = Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/ddima/OneDrive/Рабочий стол/course/beetroot-academy/Loshkovetska/cinema-park/src/components/Comments/Comments.js"],"names":["React","useState","comments","users","Heart","Comments","localStorage","getItem","comment","setComment","countComments","setCount","length","likes","setLikes","name","email","filter","user","includes","setUser","onChangeHadler","e","target","value","addComment","push","author","text","countLikes","date","Date","toLocaleDateString","putLike","console","log","ind","dataset","id","getComment","index","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport comments from \"../../mockData/comments\";\r\nimport \"./Comments.scss\";\r\nimport { users } from \"../../mockData/users\";\r\nimport { Heart } from \"../Svg/Svg\";\r\n\r\n\r\n\r\nexport default function Comments() {\r\n    if (localStorage.getItem(\"user\")) {\r\n        const [comment, setComment] = useState();\r\n        const [countComments, setCount] = useState(comments.length);\r\n        const [likes, setLikes] = useState(0);\r\n        const [{ name, email }] = users.filter(user => user.email.includes(localStorage.getItem(\"user\")));\r\n        const [user, setUser] = useState();\r\n    }\r\n\r\n    function onChangeHadler(e) {\r\n        setComment(e.target.value);\r\n    }\r\n\r\n    function addComment() {\r\n        comments.push(\r\n            {\r\n                author: name,\r\n                text: comment,\r\n                countLikes: 0,\r\n                date: new Date().toLocaleDateString('ru-RU')\r\n            }\r\n        );\r\n\r\n        setCount(comments.length);\r\n    }\r\n\r\n    function putLike(e) {\r\n        console.log(e);\r\n        let ind = +e.target.dataset.id;\r\n\r\n        if (user === email && +comments[ind].countLikes > 0) {\r\n            comments[ind].countLikes = +comments[ind].countLikes - 1;\r\n            setUser(\"\");\r\n        }\r\n        else {\r\n            comments[ind].countLikes = +comments[ind].countLikes + 1;\r\n            setUser(email);\r\n        }\r\n\r\n        setLikes(comments[ind].countLikes);\r\n\r\n\r\n    }\r\n\r\n    function getComment(author, date, text, countLikes, index) {\r\n        return (\r\n            <div className=\"comment\" key={index}>\r\n                <div className=\"comment__top\">\r\n                    <div className=\"comment__author\">{author}</div>\r\n                    <div className=\"comment__date\">{date}</div>\r\n                </div>\r\n                <p className=\"comment__text\">{text}</p>\r\n                <div className=\"comment__bottom\">\r\n                    <Heart className=\"heart-svg\" />\r\n                    <button onClick={putLike} className=\"button button--like\" data-id={index}>\r\n                        {countLikes}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            <div className=\"comments__container\">\r\n                <div className=\"comments__count\">Коментарі ({countComments})</div>\r\n                <div className=\"comments__input\">\r\n                    <textarea required className=\"input input--comment\" onChange={onChangeHadler}\r\n                        placeholder=\"Напишіть свої враження від  перегляду фільму\" />\r\n                    <button className=\"button button--comment\" onClick={addComment}>Відправити</button>\r\n                </div>\r\n                <div className=\"comments__output\">\r\n                    <div className=\"comments__old\">\r\n                        {\r\n                            comments.map((comment, index) => getComment(comment.author, comment.date, comment.text, comment.countLikes, index))\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}